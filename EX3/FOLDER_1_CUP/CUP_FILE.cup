/*************/
/* IMPORT(S) */
/*************/
import java_cup.runtime.*;
import java.io.PrintWriter;
import AST.*;
import java.util.*;

parser code 
{:
	public Lexer lexer;
	public PrintWriter file_writer;

	public Parser(Lexer lexer, PrintWriter file_writer)
	{
		super(lexer);
		this.lexer = lexer;
		this.file_writer = file_writer;
	}
	public void report_error(String message, Object info)
	{
		String str = String.format("ERROR(%d)",lexer.getLine());
		this.file_writer.println(str);		
		file_writer.close();
		// console prints
		System.out.print("ERROR >> ");
		System.out.print("[");
		System.out.print(lexer.getLine());
		System.out.print(":");
		System.out.print(lexer.getTokenStartPosition());
		System.out.print("] ");
		System.exit(0);
	}
:}

/************************/
/* CUSTOMIZE CUP PARSER */
/************************/
scan with
{:
	Symbol s;
	s = lexer.next_token();
	//System.out.print(s.sym);
	System.out.print("[");
	System.out.print(lexer.getLine());
	System.out.print(":");
	System.out.print(lexer.getTokenStartPosition());
	System.out.print("] ");
	System.out.print(TokenNames.terminalNames[s.sym]);
	if (s.value != null)
	{
		System.out.print("( ");
		System.out.print(s.value);
		System.out.print(" )");
	}
	System.out.print("\n");
	return s; 
:};

/*************/
/* TERMINALS */
/*************/
terminal LPAREN;
terminal RPAREN;
terminal LBRACK;
terminal RBRACK;
terminal LBRACE;
terminal RBRACE;
terminal NIL;
terminal PLUS;
terminal MINUS;
terminal TIMES;
terminal DIVIDE;
terminal COMMA;
terminal DOT;
terminal SEMICOLON;
terminal ELLIPSIS;
terminal ASSIGN;
terminal EQ;
terminal LT;
terminal GT;
terminal ARRAY;
terminal CLASS;
terminal EXTENDS;
terminal RETURN;
terminal WHILE;
terminal IF;
terminal NEW;

//terminal EOF;
terminal ERROR;

/*************/
/* TERMINALS */
/*************/
terminal Integer INT;
terminal String ID;
terminal String STRING;

/*****************/
/* NON TERMINALS */
/*****************/
non terminal AST_PROGRAM Program;
non terminal AST_DEC dec;
non terminal AST_DEC_LIST decList;
non terminal AST_DEC_VARDEC varDec;
non terminal AST_DEC_FUNCDEC funcDec;
non terminal AST_TWO_ID twoID;
non terminal AST_TWO_ID_LIST twoIDList;
non terminal AST_DEC_CLASSDEC classDec;
non terminal AST_CFIELD_LIST cFieldList;
non terminal AST_DEC_ARRAYDEC arrayDec;
non terminal AST_EXP exp;
non terminal AST_EXP_LIST expList;
non terminal AST_VAR var;
non terminal AST_STMT stmt;
non terminal AST_STMT_LIST stmtList;
non terminal AST_NEWEXP newExp;
non terminal AST_CFIELD cField;
non terminal AST_BINOP BINOP;
// non terminal AST_INT INT; (?)



/***********************/
/* OPERATOR PRECEDENCE */
/***********************/
precedence left DOT;
//precedence RPAREN;
precedence left LPAREN;
//precedence left RBRACK;
precedence left LBRACK;
precedence left DIVIDE;
precedence left TIMES;
precedence left MINUS;
precedence left PLUS;
precedence left GT;
precedence left LT;
precedence left EQ;	
precedence left ASSIGN;

/************************/
/* START WITH: Program */
/************************/
start with Program;

/********************/
/* DERIVATION RULES */
/********************/


Program     ::=     decList:d 				{: RESULT = new AST_PROGRAM(d);    :}
					; 

decList		::=		dec:d	decList:l		{: RESULT = new AST_DEC_LIST(d,l);    :}
					| dec:d					{: RESULT = new AST_DEC_LIST(d,null); :}
					;
					
					
dec 	    ::=     varDec:vd 				{: RESULT = new AST_DEC_VAR(vd); :}				
					| funcDec:fd			{: RESULT = new AST_DEC_FUNC(fd); :}				
					| classDec:cd			{: RESULT = new AST_DEC_CLASS(cd); :}				
					| arrayDec:ad			{: RESULT = new AST_DEC_ARRAY(ad); :}				
					;

varDec 	    ::=     ID:name1 ID:name2 SEMICOLON						{: RESULT = new AST_DEC_VARDEC_OLD(name1, name2, null); :}
					| ID:name1 ID:name2  ASSIGN exp:e SEMICOLON		{: RESULT = new AST_DEC_VARDEC_OLD(name1, name2, e);    :}
					| ID:name1 ID:name2  ASSIGN newExp:e SEMICOLON	{: RESULT = new AST_DEC_VARDEC_NEW(name1, name2, e);    :}
					;

funcDec		::= 	ID:name1 ID:name2 LPAREN RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_DEC_FUNCDEC(name1,name2,null,null,null,body); :}					
					| ID:name1 ID:name2 LPAREN ID:name3 ID:name4 RPAREN LBRACE stmtList:body RBRACE {: RESULT = new AST_DEC_FUNCDEC(name1,name2,name3,name4,null,body); :}	
					| ID:name1 ID:name2 LPAREN ID:name3 ID:name4 twoIDList:body1 RPAREN LBRACE stmtList:body2 RBRACE {: RESULT = new AST_DEC_FUNCDEC(name1,name2,name3,name4,body1,body2); :}	
					;

twoID	    ::=     COMMA ID:name1 ID:name2     {: RESULT = new AST_TWO_ID(name1,name2);   :}
					;
					
twoIDList   ::=     twoID:tid twoIDList:l       {: RESULT = new AST_TWO_ID_LIST(tid,l);    :}
					| twoID:tid                 {: RESULT = new AST_TWO_ID_LIST(tid,null); :}
					;
					
classDec    ::=     CLASS ID:name1 EXTENDS ID:name2 LBRACE cFieldList:body RBRACE {: RESULT = new AST_DEC_CLASSDEC(name1,name2,body); :}
					|CLASS ID:name1 LBRACE cFieldList:body RBRACE 				  {: RESULT = new AST_DEC_CLASSDEC(name1,null,body);                   :}
					;
					
cFieldList	::=		cField:cf	cFieldList:l		{: RESULT = new AST_CFIELD_LIST(cf,l);    :}
					| cField:cf						{: RESULT = new AST_CFIELD_LIST(cf,null); :}
					;
					
arrayDec    ::=     ARRAY ID:name1 EQ ID:name2 LBRACK RBRACK {: RESULT = new AST_DEC_ARRAYDEC(name1, name2);    :}
					;
					
exp			::=		var:v								{: RESULT = new AST_EXP_VAR(v);          :}
					| LPAREN exp:e RPAREN				{: RESULT = new AST_EXP_EXP(e);			 :}
					| exp:e1 BINOP:b exp:e2				{: RESULT = new AST_EXP_BINOP(e1,e2,b);	 :}
					| var:v DOT ID:name LPAREN RPAREN   {: RESULT = new AST_EXP_ID(v,name,null,null);:}
					| var:v DOT ID:name LPAREN exp:e RPAREN   			  {: RESULT = new AST_EXP_ID(v,name,e,null);      :}
					| var:v DOT ID:name LPAREN exp:e expList:l RPAREN     {: RESULT = new AST_EXP_ID(v,name,e,l);         :}
					| ID:name LPAREN exp:e RPAREN   					  {: RESULT = new AST_EXP_ID(null,name,e,null);   :}
					| ID:name LPAREN RPAREN      						  {: RESULT = new AST_EXP_ID(null,name,null,null);:} 
					| ID:name LPAREN exp:e expList:l RPAREN               {: RESULT = new AST_EXP_ID(null,name,e,l);      :}
					| MINUS INT:i 						{: RESULT = new AST_EXP_MINUS(i);		 :}
					| INT:i 							{: RESULT = new AST_EXP_INT(i);		     :}
					| NIL								{: RESULT = new AST_EXP_NIL();			 :}
					| STRING:s 							{: RESULT = new AST_EXP_STRING(s);		 :}
					; 
					
expList     ::=     COMMA exp:e expList:l				{: RESULT = new AST_EXP_LIST(e,l);       :}
					| COMMA exp:e						{: RESULT = new AST_EXP_LIST(e,null);    :}
					;

var			::=		ID:name								{: RESULT = new AST_VAR_SIMPLE(name);       :}
					| var:v DOT ID:fieldName			{: RESULT = new AST_VAR_FIELD(v,fieldName); :} 
					| var:v LBRACK exp:e RBRACK			{: RESULT = new AST_VAR_SUBSCRIPT(v,e);     :} 
					;

stmt		::=		varDec:vd							{: RESULT = new AST_STMT_VARDEC(vd);          :}
					| var:v ASSIGN exp:e SEMICOLON      {: RESULT = new AST_STMT_ASSIGN_EXP(v,e);     :}
					| var:v ASSIGN newExp:en SEMICOLON	{: RESULT = new AST_STMT_ASSIGN_NEWEXP(v,en); :}
					| RETURN exp:e SEMICOLON            {: RESULT = new AST_STMT_RETURN(e);  	      :}
					| RETURN SEMICOLON            		{: RESULT = new AST_STMT_RETURN(null);        :}   
					| IF    LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_IF(cond,body);       	 :}
					| WHILE LPAREN exp:cond RPAREN LBRACE stmtList:body RBRACE	{: RESULT = new AST_STMT_WHILE(cond,body);    	 :}
					| var:v DOT ID:name LPAREN RPAREN   						{: RESULT = new AST_STMT_ID(v,name,null,null);   :}
					| var:v DOT ID:name LPAREN exp:e RPAREN   					{: RESULT = new AST_STMT_ID(v,name,e,null);      :}
					| var:v DOT ID:name LPAREN exp:e expList:l RPAREN    		{: RESULT = new AST_STMT_ID(v,name,e,l);         :}
					| ID:name LPAREN exp:e RPAREN SEMICOLON					 	{: RESULT = new AST_STMT_ID(null,name,e,null);   :}
					| ID:name LPAREN RPAREN SEMICOLON  							{: RESULT = new AST_STMT_ID(null,name,null,null);:} 
					| ID:name LPAREN exp:e expList:l RPAREN SEMICOLON           {: RESULT = new AST_STMT_ID(null,name,e,l); 	 :}
					;

					
stmtList	::=		stmt:s	stmtList:l		{: RESULT = new AST_STMT_LIST(s,l);    :}
					| stmt:s				{: RESULT = new AST_STMT_LIST(s,null); :}
					;
					
newExp      ::=     NEW ID:name							{: RESULT = new AST_NEWEXP_ID1(name);   :}
					| NEW ID:name LBRACK exp:e RBRACK	{: RESULT = new AST_NEWEXP_ID2(name,e); :}
					;

cField      ::=     varDec:vd 				    {: RESULT = new AST_CFIELD_VARDEC(vd);  :}		
					| funcDec:fd	            {: RESULT = new AST_CFIELD_FUNCDEC(fd); :}		
					;

BINOP       ::=		PLUS						{: RESULT = new AST_BINOP(0);    :} 
					| MINUS						{: RESULT = new AST_BINOP(1);    :} 	
					| TIMES						{: RESULT = new AST_BINOP(2);    :}	
					| DIVIDE					{: RESULT = new AST_BINOP(3);    :}	
					| GT						{: RESULT = new AST_BINOP(4);    :}	
					| LT						{: RESULT = new AST_BINOP(5);    :}	
					| EQ						{: RESULT = new AST_BINOP(6);    :}	
					;
					


